name: Build & Release Magisk Module

on:
  push:
    branches:
      - main
  workflow_dispatch: # อนุญาตให้รัน workflow ด้วยตัวเอง

permissions:
  contents: write # ต้องการสิทธิ์ในการเขียนไฟล์ใน repository

jobs:
  build:
    runs-on: ubuntu-latest # รันบนระบบปฏิบัติการ Ubuntu ล่าสุด

    steps:
      - name: Checkout repository # ดึงโค้ดจาก repository
        uses: actions/checkout@v4

      - name: Install jq # ติดตั้ง jq สำหรับประมวลผล JSON
        run: |
          sudo apt-get update
          sudo apt-get install -y jq

      - name: Set version info # กำหนดข้อมูลเวอร์ชันเริ่มต้น
        run: |
          VERSION="v4.7"
          VERSION_CODE="151"
          echo "MODULE_VERSION=$VERSION" >> $GITHUB_ENV
          echo "MODULE_VERSION_CODE=$VERSION_CODE" >> $GITHUB_ENV

      - name: Download Latest Release Assets (Optional) # ดึงไฟล์จาก Release ล่าสุด
        id: get_release_assets
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Attempting to fetch latest release information..."
          # ดึงข้อมูล Release ล่าสุด
          RELEASE_INFO=$(curl -s -H "Accept: application/vnd.github.v3+json" \
            -H "Authorization: token $GITHUB_TOKEN" \
            "https://api.github.com/repos/${{ github.repository }}/releases/latest")
          
          # ตรวจสอบว่ามี release หรือไม่
          if echo "$RELEASE_INFO" | grep -q '"message": "Not Found"'; then
            echo "No releases found. Skipping download of existing release assets."
            exit 0
          fi

          echo "Latest release found. Parsing assets..."
          
          # ดึง URL ของไฟล์ที่ต้องการ
          UPDATE_JSON_URL=$(echo "$RELEASE_INFO" | jq -r '.assets[] | select(.name == "update.json") | .browser_download_url')
          CHANGELOG_URL=$(echo "$RELEASE_INFO" | jq -r '.assets[] | select(.name == "changelog.md") | .browser_download_url')

          # ดาวน์โหลดไฟล์ update.json (ถ้ามี)
          if [ -n "$UPDATE_JSON_URL" ] && [ "$UPDATE_JSON_URL" != "null" ]; then
            echo "Downloading update.json from latest release..."
            curl -L -o downloaded_update.json "$UPDATE_JSON_URL"
            echo "downloaded_update.json content:"
            cat downloaded_update.json
          else
            echo "update.json not found in latest release assets."
          fi

          # ดาวน์โหลดไฟล์ changelog.md (ถ้ามี)
          if [ -n "$CHANGELOG_URL" ] && [ "$CHANGELOG_URL" != "null" ]; then
            echo "Downloading changelog.md from latest release..."
            curl -L -o downloaded_changelog.md "$CHANGELOG_URL"
            echo "downloaded_changelog.md content:"
            cat downloaded_changelog.md
          else
            echo "changelog.md not found in latest release assets."
          fi

      - name: Check and list files # ตรวจสอบโครงสร้างไฟล์
        run: |
          echo "=== Repository structure ==="
          ls -la
          echo "=== Checking module.prop ==="
          if [ -f "module.prop" ]; then
            echo "module.prop exists"
            cat module.prop
          else
            echo "module.prop not found! This module might not be valid without it."
            exit 1
          fi

      - name: Update module.prop version # อัปเดตเวอร์ชันใน module.prop
        run: |
          # Backup original module.prop
          cp module.prop module.prop.bak
          
          # Update version in module.prop
          if grep -q "^version=" module.prop; then
            sed -i 's/^version=.*/version=${{ env.MODULE_VERSION }}/' module.prop
          else
            echo "version=${{ env.MODULE_VERSION }}" >> module.prop
          fi
          
          if grep -q "^versionCode=" module.prop; then
            sed -i 's/^versionCode=.*/versionCode=${{ env.MODULE_VERSION_CODE }}/' module.prop
          else
            echo "versionCode=${{ env.MODULE_VERSION_CODE }}" >> module.prop
          fi
          
          echo "=== Updated module.prop ==="
          cat module.prop

      - name: Set executable permissions # กำหนดสิทธิ์ในการเรียกใช้งานไฟล์สคริปต์
        run: |
          # Set permissions only if files exist
          [ -f "install.sh" ] && chmod +x install.sh || echo "install.sh not found"
          [ -f "uninstall.sh" ] && chmod +x uninstall.sh || echo "uninstall.sh not found"
          
          # Set permissions for META-INF
          if [ -d "META-INF" ]; then
            find META-INF -type f -name "update-binary" -exec chmod +x {} \;
            find META-INF -type f -name "*.sh" -exec chmod +x {} \;
          fi
          
          # Set permissions for script directory
          if [ -d "script" ]; then
            find script -type f -name "*.sh" -exec chmod +x {} \;
          fi
          
          # Set permissions for common directory
          if [ -d "common" ]; then
            find common -type f -name "*.sh" -exec chmod +x {} \;
          fi
          
          # Set permissions for system directory
          if [ -d "system" ]; then
            find system -type f -exec chmod 644 {} \;
            find system -type d -exec chmod 755 {} \;
          fi

      - name: Create Magisk module zip # สร้างไฟล์ Magisk module zip
        run: |
          echo "=== Creating zip file ==="
          
          # Create zip with only existing files
          ZIP_FILES=""
          
          [ -f "module.prop" ] && ZIP_FILES="$ZIP_FILES module.prop"
          [ -f "install.sh" ] && ZIP_FILES="$ZIP_FILES install.sh"
          [ -f "uninstall.sh" ] && ZIP_FILES="$ZIP_FILES uninstall.sh"
          [ -d "META-INF" ] && ZIP_FILES="$ZIP_FILES META-INF"
          [ -d "system" ] && ZIP_FILES="$ZIP_FILES system"
          [ -d "script" ] && ZIP_FILES="$ZIP_FILES script"
          [ -d "common" ] && ZIP_FILES="$ZIP_FILES common"
          
          # Add changelog.md if it exists
          [ -f "changelog.md" ] && ZIP_FILES="$ZIP_FILES changelog.md"
          
          if [ -n "$ZIP_FILES" ]; then
            zip -r "VTEC_Dynamic_${{ env.MODULE_VERSION }}.zip" $ZIP_FILES
            echo "=== Zip file created successfully ==="
            ls -la "VTEC_Dynamic_${{ env.MODULE_VERSION }}.zip"
          else
            echo "No files to zip! Please ensure your module structure is correct."
            exit 1
          fi

      - name: Update update.json # สร้างหรืออัปเดตไฟล์ update.json
        run: |
          cat << EOF > update.json
          {
            "version": "${{ env.MODULE_VERSION }}",
            "versionCode": "${{ env.MODULE_VERSION_CODE }}",
            "zipUrl": "https://github.com/${{ github.repository }}/releases/download/${{ env.MODULE_VERSION }}/VTEC_Dynamic_${{ env.MODULE_VERSION }}.zip",
            "changelog": "https://raw.githubusercontent.com/${{ github.repository }}/main/changelog.md"
          }
          EOF
          
          echo "=== update.json created ==="
          cat update.json

      - name: Commit updated files # Commit ไฟล์ที่ถูกแก้ไขกลับเข้าสู่ repository
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          # Add files if they exist and are modified
          git add update.json
          [ -f "module.prop" ] && git add module.prop
          
          # Check if there are changes to commit
          if git diff --staged --quiet; then
            echo "No changes detected to commit."
          else
            git commit -m "Update version to ${{ env.MODULE_VERSION }} [skip ci]"
            git push
            echo "Committed and pushed changes to repository."
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Release # สร้าง GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.MODULE_VERSION }}
          name: Release ${{ env.MODULE_VERSION }}
          body: |
            # VTEC Dynamic Magisk Module - ${{ env.MODULE_VERSION }}

            This is an automated release.
            
            **Changes:**
            Refer to [changelog.md](https://github.com/${{ github.repository }}/blob/main/changelog.md) for full changes.
          files: |
            VTEC_Dynamic_${{ env.MODULE_VERSION }}.zip
            update.json
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Complete job # แสดงข้อความการทำงานเสร็จสิ้น
        run: |
          echo "=== Build and Release completed successfully! ==="
          echo "Created: VTEC_Dynamic_${{ env.MODULE_VERSION }}.zip"
          echo "Version: ${{ env.MODULE_VERSION }}"
          echo "Version Code: ${{ env.MODULE_VERSION_CODE }}"
          echo "GitHub Release created with tag ${{ env.MODULE_VERSION }}"
