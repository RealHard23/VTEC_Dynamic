Name: Build & Release Magisk Module

on:
  push:
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set version info
        run: |
          VERSION="v4.7"
          VERSION_CODE="151"
          echo "MODULE_VERSION=$VERSION" >> $GITHUB_ENV
          echo "MODULE_VERSION_CODE=$VERSION_CODE" >> $GITHUB_ENV

      - name: Check and list files
        run: |
          echo "=== Repository structure ==="
          ls -la
          echo "=== Checking module.prop ==="
          if [ -f "module.prop" ]; then
            echo "module.prop exists"
            cat module.prop
          else
            echo "module.prop not found!"
            exit 1
          fi

      - name: Update module.prop version
        run: |
          # Backup original module.prop
          cp module.prop module.prop.bak
          
          # Update version in module.prop - handle different formats
          if grep -q "^version=" module.prop; then
            sed -i 's/^version=.*/version=${{ env.MODULE_VERSION }}/' module.prop
          else
            echo "version=${{ env.MODULE_VERSION }}" >> module.prop
          fi
          
          if grep -q "^versionCode=" module.prop; then
            sed -i 's/^versionCode=.*/versionCode=${{ env.MODULE_VERSION_CODE }}/' module.prop
          else
            echo "versionCode=${{ env.MODULE_VERSION_CODE }}" >> module.prop
          fi
          
          echo "=== Updated module.prop ==="
          cat module.prop

      - name: Set executable permissions
        run: |
          # Set permissions only if files exist
          [ -f "install.sh" ] && chmod +x install.sh || echo "install.sh not found"
          [ -f "uninstall.sh" ] && chmod +x uninstall.sh || echo "uninstall.sh not found"
          
          # Set permissions for META-INF
          if [ -d "META-INF" ]; then
            find META-INF -type f -name "update-binary" -exec chmod +x {} \;
            find META-INF -type f -name "*.sh" -exec chmod +x {} \;
          fi
          
          # Set permissions for script directory
          if [ -d "script" ]; then
            find script -type f -name "*.sh" -exec chmod +x {} \;
          fi
          
          # Set permissions for common directory
          if [ -d "common" ]; then
            find common -type f -name "*.sh" -exec chmod +x {} \;
          fi
          
          # Set permissions for system directory
          if [ -d "system" ]; then
            find system -type f -exec chmod 644 {} \;
          fi

      - name: Create Magisk module zip
        run: |
          echo "=== Creating zip file ==="
          
          # Create zip with only existing files
          ZIP_FILES=""
          
          [ -f "module.prop" ] && ZIP_FILES="$ZIP_FILES module.prop"
          [ -f "install.sh" ] && ZIP_FILES="$ZIP_FILES install.sh"
          [ -f "uninstall.sh" ] && ZIP_FILES="$ZIP_FILES uninstall.sh"
          [ -d "META-INF" ] && ZIP_FILES="$ZIP_FILES META-INF"
          [ -d "system" ] && ZIP_FILES="$ZIP_FILES system"
          [ -d "script" ] && ZIP_FILES="$ZIP_FILES script"
          [ -d "common" ] && ZIP_FILES="$ZIP_FILES common"
          
          # Add changelog.md if it exists
          [ -f "changelog.md" ] && ZIP_FILES="$ZIP_FILES changelog.md"
          
          if [ -n "$ZIP_FILES" ]; then
            zip -r "VTEC_Dynamic_${{ env.MODULE_VERSION }}.zip" $ZIP_FILES
            echo "=== Zip file created successfully ==="
            ls -la VTEC_Dynamic_${{ env.MODULE_VERSION }}.zip
          else
            echo "No files to zip!"
            exit 1
          fi

      - name: Update update.json
        run: |
          cat << EOF > update.json
          {
            "version": "${{ env.MODULE_VERSION }}",
            "versionCode": "${{ env.MODULE_VERSION_CODE }}",
            "zipUrl": "https://github.com/${{ github.repository }}/releases/download/${{ env.MODULE_VERSION }}/VTEC_Dynamic_${{ env.MODULE_VERSION }}.zip",
            "changelog": "https://raw.githubusercontent.com/${{ github.repository }}/main/changelog.md"
          }
          EOF
          
          echo "=== update.json created ==="
          cat update.json

      - name: Commit updated files
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          # Add files if they exist
          git add update.json
          [ -f "module.prop" ] && git add module.prop
          
          # Check if there are changes to commit
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "Update version to ${{ env.MODULE_VERSION }} [skip ci]"
            git push
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Complete job
        run: |
          echo "=== Build completed successfully ==="
          echo "Created: VTEC_Dynamic_${{ env.MODULE_VERSION }}.zip"
          echo "Version: ${{ env.MODULE_VERSION }}"
          echo "Version Code: ${{ env.MODULE_VERSION_CODE }}"
          ls -la VTEC_Dynamic_${{ env.MODULE_VERSION }}.zip
