name: Update Module Info from GitHub Release

on:
  release:
    types: [published] # This workflow runs when a new release is published

permissions:
  contents: write # Required to commit files back to the repository

jobs:
  update_info:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Get Release Info
        id: get_release # Assign an ID to this step to access its outputs
        run: |
          # The GitHub event payload contains release information
          # We need to parse it to get the version and asset URL
          RELEASE_TAG="${{ github.event.release.tag_name }}"
          RELEASE_ZIP_URL=""
          
          # Find the .zip asset in the release assets
          # Assuming the module zip file contains "VTEC_Unlimit" in its name
          for asset in $(echo "${{ github.event.release.assets | toJSON }}" | jq -r '.[].browser_download_url'); do
            if [[ "$asset" == *"/VTEC_Unlimit_"*".zip" ]]; then
              RELEASE_ZIP_URL="$asset"
              break
            fi
          done

          if [ -z "$RELEASE_TAG" ]; then
            echo "Error: Release tag not found!"
            exit 1
          fi

          if [ -z "$RELEASE_ZIP_URL" ]; then
            echo "Error: Magisk module .zip asset (containing 'VTEC_Unlimit_') not found in the release assets!"
            exit 1
          fi

          # Extract version and versionCode from the tag name
          # Assuming tag_name is like v4.3 or 4.3 or V4.3
          MODULE_VERSION=$(echo "$RELEASE_TAG" | sed 's/^v//I') # Remove 'v' prefix if exists, case-insensitive
          
          # Try to get versionCode. This is a bit tricky if not in tag.
          # For simplicity, let's assume versionCode is part of the tag or hardcode.
          # A better way might be to add it to release body or always use the old one from module.prop
          # For now, let's try to get a numeric part from the end of the tag if possible, or use a placeholder.
          MODULE_VERSION_CODE=$(echo "$RELEASE_VERSION" | sed 's/[^0-9]//g') # Extract only numbers
          if [ -z "$MODULE_VERSION_CODE" ]; then
            MODULE_VERSION_CODE="0" # Fallback if no numbers found
          fi

          # Output to be used by subsequent steps
          echo "Detected Module Version: $MODULE_VERSION"
          echo "Detected Module Version Code: $MODULE_VERSION_CODE"
          echo "Detected Zip URL: $RELEASE_ZIP_URL"

          echo "MODULE_VERSION=$MODULE_VERSION" >> $GITHUB_ENV
          echo "MODULE_VERSION_CODE=$MODULE_VERSION_CODE" >> $GITHUB_ENV
          echo "MODULE_ZIP_URL=$RELEASE_ZIP_URL" >> $GITHUB_ENV

      - name: Update module.prop
        run: |
          echo "=== Updating module.prop ==="
          # Backup original module.prop
          cp module.prop module.prop.bak
          
          # Update version in module.prop
          if grep -q "^version=" module.prop; then
            sed -i "s|^version=.*|version=${{ env.MODULE_VERSION }}|" module.prop
          else
            echo "version=${{ env.MODULE_VERSION }}" >> module.prop
          fi
          
          if grep -q "^versionCode=" module.prop; then
            sed -i "s|^versionCode=.*|versionCode=${{ env.MODULE_VERSION_CODE }}|" module.prop
          else
            echo "versionCode=${{ env.MODULE_VERSION_CODE }}" >> module.prop
          fi
          
          echo "=== Updated module.prop ==="
          cat module.prop

      - name: Update update.json
        run: |
          echo "=== Creating/Updating update.json ==="
          cat << EOF > update.json
          {
            "version": "${{ env.MODULE_VERSION }}",
            "versionCode": "${{ env.MODULE_VERSION_CODE }}",
            "zipUrl": "${{ env.MODULE_ZIP_URL }}",
            "changelog": "https://raw.githubusercontent.com/${{ github.repository }}/main/changelog.md"
          }
          EOF
          
          echo "=== update.json created ==="
          cat update.json

      - name: Commit updated files
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          git add module.prop update.json
          
          if git diff --staged --quiet; then
            echo "No changes to commit for module.prop or update.json."
          else
            git commit -m "âœ¨ Sync: Update module.prop and update.json from Release ${{ env.MODULE_VERSION }} [skip ci]"
            git push
            echo "Committed module.prop and update.json changes."
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Required for pushing changes

      - name: Complete job
        run: |
          echo "=== Update from Release completed successfully ==="
          echo "Module Info Synced:"
          echo "Version: ${{ env.MODULE_VERSION }}"
          echo "Version Code: ${{ env.MODULE_VERSION_CODE }}"
          echo "Zip URL: ${{ env.MODULE_ZIP_URL }}"

