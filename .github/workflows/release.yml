name: Update Module Info from GitHub Release

on:
  release:
    types: [published]

permissions:
  contents: write   # Needed to commit back to the repository

jobs:
  update_info:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install jq
        run: |
          sudo apt-get update -qq
          sudo apt-get install -y jq

      - name: Collect release data
        id: release
        run: |
          TAG="${{ github.event.release.tag_name }}"
          ZIP_URL="$(echo '${{ toJson(github.event.release.assets) }}' \
                     | jq -r '.[] | select(.name | contains("VTEC_Dynamic_")) | .browser_download_url')"

          [[ -z "$TAG" ]]      && { echo "❌ No release tag found";      exit 1; }
          [[ -z "$ZIP_URL" ]]  && { echo "❌ No VTEC_Dynamic_*.zip asset found"; exit 1; }

          VERSION="${TAG#v}"
          VERSION_CODE="151"

          echo "VERSION=$VERSION"         >> "$GITHUB_ENV"
          echo "VERSION_CODE=$VERSION_CODE" >> "$GITHUB_ENV"
          echo "ZIP_URL=$ZIP_URL"         >> "$GITHUB_ENV"

      - name: Update module.prop
        run: |
          [[ -f module.prop ]] && cp module.prop module.prop.bak || touch module.prop

          sed -i '/^version=/d'       module.prop
          sed -i '/^versionCode=/d'   module.prop
          echo "version=${{ env.VERSION }}"       >> module.prop
          echo "versionCode=${{ env.VERSION_CODE }}" >> module.prop

      - name: Create / update update.json
        run: |
          cat > update.json <<EOF
          {
            "version": "${{ env.VERSION }}",
            "versionCode": ${{ env.VERSION_CODE }},
            "zipUrl": "${{ env.ZIP_URL }}",
            "changelog": "https://raw.githubusercontent.com/${{ github.repository }}/main/changelog.md"
          }
          EOF

      - name: Commit & push changes
        run: |
          git config user.name  "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          git add module.prop update.json
          if git diff --cached --quiet; then
            echo "ℹ️  Nothing to commit."
          else
            git commit -m "✨ Sync: update module info from release ${{ env.VERSION }} [skip ci]"
            git push --force-with-lease
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Job summary
        run: |
          echo "✅ Module info synced:"
          echo "   Version: ${{ env.VERSION }}"
          echo "   VersionCode: ${{ env.VERSION_CODE }}"
          echo "   Zip URL: ${{ env.ZIP_URL }}"

